/******************************************************************************
Class Sequencer

*******************************************************************************/

#ifndef SEQUENCR_H
#define SEQUENCR_H


#include <stdlib.h>
#include "ArduinoJson-v6.19.4.h"
#include <iostream>
#include <string.h>
#include <list>
#include <fstream>

/*
#include <iostream>

using std::cout;
using std::endl;
*/

const char PASS_DELIMITER [] = "_";
const char STATUS_ON [] = "ON";
const char STATUS_OFF [] = "OFF";

struct uP_instruction_t
{
    short unsigned int pin;
    bool status;
};

class Pass
{
    private:

        void set_uP_instruction (const char * uP_Inst)
        {
            char * tempStr; //temp string for strtok...
            strcpy (tempStr,uP_Inst);
            //extract the token of pin number from input string (the first one)
            char * token = strtok (tempStr, PASS_DELIMITER);
            // convert to short unsigned int and assign to pin field
            _uPInstr.pin = strtol ( token, NULL, 0 ); 
            // extract the token of status number from input string (the second one)
            token = strtok (NULL, PASS_DELIMITER);
            //compare with string "ON" or "OFF" and set the status consequently
            _uPInstr.status = (strcmp (token,STATUS_ON) == 0) ? true : false;
        }    

        /*
        void set_uP_instruction (uP_instruction_t uP_Instr)
        {
            _uPInstr.pin = uP_Instr.pin;
            _uPInstr.status = uP_Instr.status;
        }
        */

        int _id;
        const char * _description;
        uP_instruction_t _uPInstr;
        double _duration;

    public:
        Pass (int id,
            const char * descr,
            double duration,
            const char * uP_instruction) :

                _id(id),
                _description(descr),
                _duration(duration)
        {
            //strcpy (_description, descr);
            set_uP_instruction (uP_instruction);
        }

        /*
        Pass (int id,
            char * descr,
            double duration,
            uP_instruction_t uP_instruction) :
            _id(id),
            _duration(duration)
        {
            strcpy (_description, descr);
            set_uP_instruction (uP_instruction);
        }

        void setId (int const id)
        {
            _id = id;
        }
        */

        int getId () const
        {
            return _id;
        }

        /*
        void setDescription (char const * descr)
        {
            strcpy (_description,descr);
        }
        */

        char const * getDescription () const
        {
            return _description;
        }



        uP_instruction_t get_uP_instruction () const
        {
            return _uPInstr;
        }

        /*
        void setDuration (double dur)
        {
            _duration = dur;
        }
        */

        double getDuration () const
        {
            return _duration;
        }

};

class PassesList : private std::list<Pass>
{
    private:
        const double _offset;
        const double _groupDuration;

    public:
        PassesList (double offset, double groupDuration) :
            _offset(offset), _groupDuration(groupDuration)
        {}

        double getOffset() const
        {
            return _offset;
        }

        double getGroupDuration() const
        {
            return _groupDuration;
        }

};


#endif
